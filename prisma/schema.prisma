generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model bank_account {
  id                                       Int                  @id(map: "PK__bank_acc__3213E83FC6E22FC0")
  amount_HUF                               Float
  amount                                   Float
  currency                                 String               @db.Char(3)
  date                                     DateTime             @db.Date
  account                                  String               @default("MKB_HUF", map: "DF__bank_acco__accou__68336F3E") @db.VarChar(8)
  amount_EUR                               Float
  bank_account_numbers                     bank_account_numbers @relation(fields: [account], references: [alias], onUpdate: NoAction, map: "fk_bank_account_account")
  currency_bank_account_currencyTocurrency currency             @relation("bank_account_currencyTocurrency", fields: [currency], references: [code], onUpdate: NoAction, map: "fk_bank_account_currency")

  @@unique([date, account], map: "uq_bank_account")
}

model bank_account_numbers {
  alias                                            String         @id(map: "PK__bank_acc__8C585C055AF05894") @db.VarChar(8)
  bank                                             String         @db.VarChar(200)
  IBAN                                             String         @db.VarChar(100)
  currency                                         String         @db.Char(3)
  bank_account                                     bank_account[]
  currency_bank_account_numbers_currencyTocurrency currency       @relation("bank_account_numbers_currencyTocurrency", fields: [currency], references: [code], onUpdate: NoAction, map: "fk_bank_account_numbers_currency")

  @@unique([bank, currency], map: "uq_bank_account_numbers")
}

model country {
  code                                             String            @id(map: "PK__country__357D4CF84D3EA2BB") @db.Char(2)
  name                                             String            @unique(map: "UQ__country__72E12F1B4E0C2A7A") @db.VarChar(100)
  region                                           String            @db.VarChar(5)
  region_country_regionToregion                    region            @relation("country_regionToregion", fields: [region], references: [code], onUpdate: NoAction, map: "fk_country_region")
  customer_customer_countryTocountry               customer[]        @relation("customer_countryTocountry")
  pack_unit_event_pack_unit_event_countryTocountry pack_unit_event[] @relation("pack_unit_event_countryTocountry")
}

model currency {
  code                                                         String                 @id(map: "PK__currency__357D4CF8B32F5190") @db.Char(3)
  bank_account_bank_account_currencyTocurrency                 bank_account[]         @relation("bank_account_currencyTocurrency")
  bank_account_numbers_bank_account_numbers_currencyTocurrency bank_account_numbers[] @relation("bank_account_numbers_currencyTocurrency")
  currency_exchange_currency_exchange_currencyTocurrency       currency_exchange[]    @relation("currency_exchange_currencyTocurrency")
  invoice_invoice_currencyTocurrency                           invoice[]              @relation("invoice_currencyTocurrency")
  order_pack_event                                             order_pack_event[]
}

model currency_exchange {
  id                                            Int      @id(map: "PK__currency__3213E83F5CB9A5FF")
  HUFvalue                                      Float
  exchange_date                                 DateTime @db.Date
  currency                                      String   @db.Char(3)
  currency_currency_exchange_currencyTocurrency currency @relation("currency_exchange_currencyTocurrency", fields: [currency], references: [code], onUpdate: NoAction, map: "fk_currency_exchange_currency")

  @@unique([exchange_date, currency], map: "uq_currency_exchange")
}

model customer {
  id                                                       Int                @id(map: "PK__customer__3213E83F9B2E2E44")
  name                                                     String?            @db.VarChar(100)
  country                                                  String             @db.Char(2)
  industry                                                 Int?
  terms                                                    Int?
  country_customer_countryTocountry                        country            @relation("customer_countryTocountry", fields: [country], references: [code], onUpdate: NoAction, map: "fk_customer_country")
  industry_customer_industryToindustry                     industry?          @relation("customer_industryToindustry", fields: [industry], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer_industry")
  customer_contact_customer_contact_customerTocustomer     customer_contact[] @relation("customer_contact_customerTocustomer")
  order_pack_event_order_pack_event_customerTocustomer     order_pack_event[] @relation("order_pack_event_customerTocustomer")
  order_pack_event_order_pack_event_inv_customerTocustomer order_pack_event[] @relation("order_pack_event_inv_customerTocustomer")
  participant_participant_customerTocustomer               participant[]      @relation("participant_customerTocustomer")

  @@unique([name, country], map: "uq_customer_name_country")
}

model customer_contact {
  id                                           Int                @id(map: "PK__customer__3213E83F006EE70F")
  last_name                                    String             @db.VarChar(50)
  first_name                                   String             @db.VarChar(50)
  display_name                                 String             @unique(map: "UQ__customer__2C575876DC7B6BA3") @db.VarChar(100)
  email                                        String?            @db.VarChar(100)
  email_private                                String?            @db.VarChar(100)
  phone1                                       String?            @db.VarChar(20)
  phone2                                       String?            @db.VarChar(20)
  customer                                     Int
  note                                         String?            @db.VarChar(500)
  customer_customer_contact_customerTocustomer customer           @relation("customer_contact_customerTocustomer", fields: [customer], references: [id], onUpdate: NoAction, map: "fk_customer_contact_customer")
  order_pack_event                             order_pack_event[]
}

model holiday {
  id         Int      @id(map: "PK__holiday__3213E83FA4166EF7")
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  title      String?  @db.VarChar(100)
}

model industry {
  id                                   Int        @id(map: "PK__industry__3213E83F1D79B624")
  name                                 String?    @unique(map: "UQ__industry__72E12F1BC81CC6A0") @db.VarChar(100)
  customer_customer_industryToindustry customer[] @relation("customer_industryToindustry")
}

model instructor {
  id                                                                           Int                          @id(map: "PK__instruct__3213E83F6E79C2E1")
  last_name                                                                    String                       @db.VarChar(50)
  first_name                                                                   String                       @db.VarChar(50)
  display_name                                                                 String                       @unique(map: "UQ__instruct__2C57587681D1EFB1") @db.VarChar(100)
  email                                                                        String?                      @db.VarChar(100)
  email_private                                                                String?                      @db.VarChar(100)
  phone                                                                        String?                      @db.VarChar(20)
  id_number                                                                    String?                      @db.VarChar(20)
  company                                                                      Int                          @default(1, map: "DF__instructo__compa__7DCDAAA2")
  calendar_index                                                               Int                          @default(1, map: "DF__instructo__calen__7EC1CEDB")
  instructor_company                                                           instructor_company           @relation(fields: [company], references: [id], onUpdate: NoAction, map: "fk_instructor_company")
  instructor_holiday_instructor_holiday_instructorToinstructor                 instructor_holiday[]         @relation("instructor_holiday_instructorToinstructor")
  instructor_pack_unit_event_instructor_pack_unit_event_instructorToinstructor instructor_pack_unit_event[] @relation("instructor_pack_unit_event_instructorToinstructor")
}

model instructor_company {
  id         Int          @id(map: "PK__instruct__3213E83FA0B8D54C")
  name       String       @unique(map: "UQ__instruct__72E12F1BD9C014F0") @db.VarChar(100)
  instructor instructor[]
}

model instructor_holiday {
  id                                                   Int        @id(map: "PK__instruct__3213E83F11A3D216")
  instructor                                           Int
  start_date                                           DateTime   @db.Date
  end_date                                             DateTime   @db.Date
  title                                                String     @default("holiday", map: "DF__instructo__title__79FD19BE") @db.VarChar(100)
  instructor_instructor_holiday_instructorToinstructor instructor @relation("instructor_holiday_instructorToinstructor", fields: [instructor], references: [id], onUpdate: NoAction, map: "fk_instructor_holiday_instructor")

  @@unique([instructor, start_date], map: "uq_instrucotr_holiday")
}

model instructor_pack_unit_event {
  id                                                                                                                       Int                                @id(map: "PK__instruct__3213E83F817743A1")
  pack_unit_event                                                                                                          Int
  instructor                                                                                                               Int
  confirmed                                                                                                                String                             @db.Char(1)
  in_finance_plan                                                                                                          String                             @db.Char(1)
  invoice                                                                                                                  String                             @db.Char(1)
  coc                                                                                                                      String                             @db.Char(1)
  total                                                                                                                    String                             @db.Char(1)
  instructor_instructor_pack_unit_event_instructorToinstructor                                                             instructor                         @relation("instructor_pack_unit_event_instructorToinstructor", fields: [instructor], references: [id], onUpdate: NoAction, map: "fk_instructor_pack_unit_event_instructor")
  pack_unit_event_instructor_pack_unit_event_pack_unit_eventTopack_unit_event                                              pack_unit_event                    @relation("instructor_pack_unit_event_pack_unit_eventTopack_unit_event", fields: [pack_unit_event], references: [id], onUpdate: NoAction, map: "fk_instructor_pack_unit_event_pack_unit_event")
  instructor_pack_unit_event_dates_instructor_pack_unit_event_dates_instructor_pack_unit_eventToinstructor_pack_unit_event instructor_pack_unit_event_dates[] @relation("instructor_pack_unit_event_dates_instructor_pack_unit_eventToinstructor_pack_unit_event")

  @@unique([pack_unit_event, instructor], map: "uq_instructor_pack_unit_event")
}

model instructor_pack_unit_event_dates {
  id                                                                                                                 Int                         @id(map: "PK__instruct__3213E83F5429B4C4")
  instructor_pack_unit_event                                                                                         Int?
  day                                                                                                                DateTime?                   @db.Date
  instructor_pack_unit_event_instructor_pack_unit_event_dates_instructor_pack_unit_eventToinstructor_pack_unit_event instructor_pack_unit_event? @relation("instructor_pack_unit_event_dates_instructor_pack_unit_eventToinstructor_pack_unit_event", fields: [instructor_pack_unit_event], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_instructor_pack_unit_event_dates")

  @@index([day], map: "instructor_pack_unit_event_dates_day_index")
}

model invoice {
  id                                         Int            @id(map: "PK__invoice__3213E83F969B4B28")
  invoice_number                             String         @db.VarChar(200)
  supplier                                   Int
  currency                                   String         @db.Char(3)
  type                                       Int
  invoice_date                               DateTime?      @db.Date
  payment_date                               DateTime?      @db.Date
  delivery_date                              DateTime?      @db.Date
  transfer_date                              DateTime?      @db.Date
  actual_report_date                         DateTime?      @db.Date
  paid                                       String         @db.Char(1)
  status                                     String         @db.Char(1)
  accounting                                 String         @db.Char(1)
  note                                       String?        @db.VarChar(200)
  currency_invoice_currencyTocurrency        currency       @relation("invoice_currencyTocurrency", fields: [currency], references: [code], onUpdate: NoAction, map: "fk_invoice_currancy")
  supplier_invoice_supplierTosupplier        supplier       @relation("invoice_supplierTosupplier", fields: [supplier], references: [id], onUpdate: NoAction, map: "fk_invoice_supplier")
  invoice_type                               invoice_type   @relation(fields: [type], references: [id], onUpdate: NoAction, map: "fk_invoice_type")
  invoice_line_invoice_line_invoiceToinvoice invoice_line[] @relation("invoice_line_invoiceToinvoice")
}

model invoice_line {
  id                                             Int               @id(map: "PK__invoice___3213E83F9BACA21D")
  title                                          String            @db.VarChar(200)
  gross                                          Float             @db.Real
  vat                                            Int
  net                                            Float             @db.Real
  type                                           Int
  details                                        String?           @db.VarChar(1000)
  invoice                                        Int
  pack_event                                     Int?
  invoice_invoice_line_invoiceToinvoice          invoice           @relation("invoice_line_invoiceToinvoice", fields: [invoice], references: [id], onUpdate: NoAction, map: "fk_invoice_line_invoice")
  pack_event_invoice_line_pack_eventTopack_event pack_event?       @relation("invoice_line_pack_eventTopack_event", fields: [pack_event], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invoice_line_pack_event")
  invoice_line_type                              invoice_line_type @relation(fields: [type], references: [id], onUpdate: NoAction, map: "fk_invoice_line_type")
}

model invoice_line_type {
  id                      Int                     @id(map: "PK__invoice___3213E83F74F08EBA")
  name                    String?                 @db.VarChar(100)
  type_group              Int
  invoice_line            invoice_line[]
  invoice_line_type_group invoice_line_type_group @relation(fields: [type_group], references: [id], onUpdate: NoAction, map: "fk_invoice_line_type_group")

  @@unique([name, type_group], map: "uq_invoice_line_type_name_group")
}

model invoice_line_type_group {
  id                Int                 @id(map: "PK__invoice___3213E83FBE8E2748")
  name              String              @unique(map: "UQ__invoice___72E12F1BB5623922") @db.VarChar(100)
  invoice_line_type invoice_line_type[]
}

model invoice_type {
  id      Int       @id(map: "PK__invoice___3213E83F83D5F893")
  name    String    @unique(map: "UQ__invoice___72E12F1B8BBA902F") @db.VarChar(100)
  invoice invoice[]
}

model order_pack_event {
  id                                                                             Int                     @id(map: "PK__order_pa__3213E83F263F73BA")
  pack_event                                                                     Int
  customer                                                                       Int
  inv_customer                                                                   Int
  contact                                                                        Int?
  expected_amount                                                                Float
  expected_amount_currency                                                       String                  @db.Char(3)
  expected_amount_HUF                                                            Float?
  expected_amount_EUR                                                            Float?
  vat                                                                            Int?
  payment_date                                                                   DateTime?               @db.Date
  actual_report_date                                                             DateTime?               @db.Date
  status                                                                         String                  @db.VarChar(5)
  qoute                                                                          String                  @db.Char(1)
  qoute_number                                                                   String?                 @db.VarChar(50)
  po                                                                             String                  @db.Char(1)
  po_number                                                                      String?                 @db.VarChar(50)
  case_id                                                                        String?                 @db.VarChar(50)
  oid                                                                            String?                 @db.VarChar(50)
  far                                                                            String                  @db.Char(1)
  invoiced                                                                       String                  @db.Char(1)
  invoice_number                                                                 String?                 @db.VarChar(50)
  note                                                                           String?                 @db.VarChar(500)
  paid                                                                           String                  @default("N", map: "DF__order_pack__paid__5A846E65") @db.Char(1)
  anonym                                                                         String                  @default("N", map: "DF__order_pac__anony__0A338187") @db.Char(1)
  is_far_required                                                                String?                 @db.Char(1)
  qr_eval                                                                        String?                 @db.Char(1)
  customer_contact                                                               customer_contact?       @relation(fields: [contact], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_pack_event_contact")
  currency                                                                       currency                @relation(fields: [expected_amount_currency], references: [code], onUpdate: NoAction, map: "fk_order_pack_event_curreny")
  customer_order_pack_event_customerTocustomer                                   customer                @relation("order_pack_event_customerTocustomer", fields: [customer], references: [id], onUpdate: NoAction, map: "fk_order_pack_event_customer")
  customer_order_pack_event_inv_customerTocustomer                               customer                @relation("order_pack_event_inv_customerTocustomer", fields: [inv_customer], references: [id], onUpdate: NoAction, map: "fk_order_pack_event_inv_customer")
  pack_event_order_pack_event_pack_eventTopack_event                             pack_event              @relation("order_pack_event_pack_eventTopack_event", fields: [pack_event], references: [id], onUpdate: NoAction, map: "fk_order_pack_event_pack_event")
  order_pack_unit_event_order_pack_unit_event_order_pack_eventToorder_pack_event order_pack_unit_event[] @relation("order_pack_unit_event_order_pack_eventToorder_pack_event")
}

model order_pack_unit_event {
  id                                                                               Int                 @id(map: "PK__order_pa__3213E83F843571C1")
  order_pack_event                                                                 Int
  pack_unit_event                                                                  Int
  participant_number                                                               Int?
  order_pack_event_order_pack_unit_event_order_pack_eventToorder_pack_event        order_pack_event    @relation("order_pack_unit_event_order_pack_eventToorder_pack_event", fields: [order_pack_event], references: [id], onUpdate: NoAction, map: "fk_pack_order_unit_event_order_pack_evnet")
  pack_unit_event_order_pack_unit_event_pack_unit_eventTopack_unit_event           pack_unit_event     @relation("order_pack_unit_event_pack_unit_eventTopack_unit_event", fields: [pack_unit_event], references: [id], onUpdate: NoAction, map: "fk_pack_order_unit_event_pack_unit_event")
  order_participant_order_participant_order_pack_unit_eventToorder_pack_unit_event order_participant[] @relation("order_participant_order_pack_unit_eventToorder_pack_unit_event")
}

model order_participant {
  id                                                                                   Int                   @id(map: "PK__order_pa__3213E83F89A7007A")
  participant                                                                          Int
  order_pack_unit_event                                                                Int
  replace_event                                                                        Int?
  order_pack_unit_event_order_participant_order_pack_unit_eventToorder_pack_unit_event order_pack_unit_event @relation("order_participant_order_pack_unit_eventToorder_pack_unit_event", fields: [order_pack_unit_event], references: [id], onUpdate: NoAction, map: "fk_order_participant_order_pack_unit_event")
  pack_unit_event                                                                      pack_unit_event?      @relation(fields: [replace_event], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order_participant_pack_unit_event")
  participant_order_participant_participantToparticipant                               participant           @relation("order_participant_participantToparticipant", fields: [participant], references: [id], onUpdate: NoAction, map: "fk_order_participant_participant")
}

model pack {
  id                                   Int            @id(map: "PK__pack__3213E83FFD465660")
  code                                 String         @unique(map: "UQ__pack__357D4CF989D30D2D") @db.VarChar(50)
  name                                 String?        @db.VarChar(500)
  status                               String         @db.Char(1)
  list_price_HUF                       Int?
  list_price_EUR                       Float?
  topic                                Int?
  type                                 String         @db.Char(1)
  topic_pack_topicTotopic              topic?         @relation("pack_topicTotopic", fields: [topic], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pack_topic")
  pack_version_pack_version_packTopack pack_version[] @relation("pack_version_packTopack")
}

model pack_event {
  id                                                       Int                @id(map: "PK__pack_eve__3213E83F00B89461")
  pack                                                     Int
  status                                                   String             @db.Char(2)
  price_HUF                                                Int?
  price_EUR                                                Float?
  start_date                                               DateTime?          @db.Date
  end_date                                                 DateTime?          @db.Date
  income_HUF                                               Int?
  income_EUR                                               Float?
  training_type                                            String             @default("CL", map: "DF__pack_even__train__02925FBF") @db.VarChar(4)
  labor_status                                             String             @default("N", map: "DF__pack_even__labor__047AA831") @db.Char(1)
  courseware_status                                        String             @default("N", map: "DF__pack_even__cours__056ECC6A") @db.Char(1)
  teams_status                                             String             @default("N", map: "DF__pack_even__teams__0662F0A3") @db.Char(1)
  is_far_required                                          String?            @db.Char(1)
  qr_eval                                                  String?            @db.Char(1)
  instructor_txt                                           String?            @db.VarChar(100)
  customer_txt                                             String?            @db.VarChar(100)
  invoice_line_invoice_line_pack_eventTopack_event         invoice_line[]     @relation("invoice_line_pack_eventTopack_event")
  order_pack_event_order_pack_event_pack_eventTopack_event order_pack_event[] @relation("order_pack_event_pack_eventTopack_event")
  pack_version                                             pack_version       @relation(fields: [pack], references: [id], onUpdate: NoAction, map: "fk_pack_event_pack_version")
  pack_unit_event_pack_unit_event_pack_eventTopack_event   pack_unit_event[]  @relation("pack_unit_event_pack_eventTopack_event")

  @@index([training_type], map: "pack_event_training_type_index")
}

model pack_unit {
  id                                                   Int               @id(map: "PK__pack_uni__3213E83F6F9F23B4")
  pack                                                 Int
  unit                                                 Int
  pack_version                                         pack_version      @relation(fields: [pack], references: [id], onUpdate: NoAction, map: "fk_pack_unit_pack_version")
  unit_version                                         unit_version      @relation(fields: [unit], references: [id], onUpdate: NoAction, map: "fk_pack_unit_unit_version")
  pack_unit_event_pack_unit_event_pack_unitTopack_unit pack_unit_event[] @relation("pack_unit_event_pack_unitTopack_unit")

  @@unique([pack, unit], map: "uq_pack_unit")
  @@index([pack], map: "pack_unit_pack_index")
}

model pack_unit_event {
  id                                                                                     Int                          @id(map: "PK__pack_uni__3213E83F4DAE202E")
  pack_event                                                                             Int
  pack_unit                                                                              Int
  status                                                                                 String                       @db.Char(2)
  start_date                                                                             DateTime?                    @db.Date
  end_date                                                                               DateTime?                    @db.Date
  date_status                                                                            String                       @db.Char(1)
  start_time_loc                                                                         DateTime?                    @db.Time
  end_time_loc                                                                           DateTime?                    @db.Time
  start_time_part                                                                        DateTime?                    @db.Time
  end_time_part                                                                          DateTime?                    @db.Time
  timezone                                                                               String?                      @db.VarChar(50)
  place_type                                                                             String                       @db.VarChar(5)
  country                                                                                String?                      @db.Char(2)
  city                                                                                   String?                      @db.VarChar(100)
  language                                                                               String                       @db.VarChar(3)
  participant_number                                                                     Int?
  daypart                                                                                String                       @default("FULL", map: "DF__pack_unit__daypa__7814D14C") @db.VarChar(4)
  notes                                                                                  String?                      @db.VarChar(500)
  timezone_diff                                                                          Float?
  is_traditional_weekend                                                                 String                       @db.Char(1)
  instructor_pack_unit_event_instructor_pack_unit_event_pack_unit_eventTopack_unit_event instructor_pack_unit_event[] @relation("instructor_pack_unit_event_pack_unit_eventTopack_unit_event")
  order_pack_unit_event_order_pack_unit_event_pack_unit_eventTopack_unit_event           order_pack_unit_event[]      @relation("order_pack_unit_event_pack_unit_eventTopack_unit_event")
  order_participant                                                                      order_participant[]
  country_pack_unit_event_countryTocountry                                               country?                     @relation("pack_unit_event_countryTocountry", fields: [country], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "fk_pack_unit_event_country")
  pack_event_pack_unit_event_pack_eventTopack_event                                      pack_event                   @relation("pack_unit_event_pack_eventTopack_event", fields: [pack_event], references: [id], onUpdate: NoAction, map: "fk_pack_unit_event_pack_event")
  pack_unit_pack_unit_event_pack_unitTopack_unit                                         pack_unit                    @relation("pack_unit_event_pack_unitTopack_unit", fields: [pack_unit], references: [id], onUpdate: NoAction, map: "fk_pack_unit_event_pack_unit")

  @@index([daypart], map: "pack_unit_event_daypart_index")
  @@index([end_date], map: "pack_unit_event_end_date_index")
  @@index([pack_event], map: "pack_unit_event_pack_event_index")
  @@index([start_date], map: "pack_unit_event_start_date_index")
  @@index([status], map: "pack_unit_event_status_index")
}

model pack_version {
  id                           Int          @id(map: "PK__pack_ver__3213E83FF02A6A71")
  pack                         Int
  version                      String       @default("", map: "DF__pack_vers__versi__2B947552") @db.VarChar(10)
  is_default                   String       @default("N", map: "DF__pack_vers__is_de__2C88998B") @db.Char(1)
  published                    String       @default("Y", map: "DF__pack_vers__publi__2D7CBDC4") @db.Char(1)
  pack_event                   pack_event[]
  pack_unit                    pack_unit[]
  pack_pack_version_packTopack pack         @relation("pack_version_packTopack", fields: [pack], references: [id], onUpdate: NoAction, map: "fk_pack_version_pack")

  @@unique([pack, version], map: "uq_pack_version")
}

model participant {
  id                                                           Int                 @id(map: "PK__particip__3213E83F88812D4E")
  email                                                        String              @unique(map: "uq_participant") @db.VarChar(200)
  name                                                         String              @db.VarChar(200)
  customer                                                     Int?
  order_participant_order_participant_participantToparticipant order_participant[] @relation("order_participant_participantToparticipant")
  customer_participant_customerTocustomer                      customer?           @relation("participant_customerTocustomer", fields: [customer], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_participant_customer")
}

model region {
  code                           String    @id(map: "PK__region__357D4CF803D13338") @db.VarChar(5)
  name                           String    @unique(map: "UQ__region__72E12F1BFE11D2B4") @db.VarChar(50)
  country_country_regionToregion country[] @relation("country_regionToregion")
}

model supplier {
  id                                 Int       @id(map: "PK__supplier__3213E83F74041355")
  name                               String    @unique(map: "UQ__supplier__72E12F1B9B136983") @db.NVarChar(200)
  invoice_invoice_supplierTosupplier invoice[] @relation("invoice_supplierTosupplier")
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B61FAD3A71A") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model szabolcs {
  id     Int?
  szoveg String @db.NVarChar(200)

  @@ignore
}

model test_table {
  id Int  @id(map: "pk_id")
  i  Int?
}

model topic {
  id                     Int    @id(map: "PK__topic__3213E83FCDC354C7")
  name                   String @unique(map: "UQ__topic__72E12F1BE37EEC60") @db.VarChar(150)
  pack_pack_topicTotopic pack[] @relation("pack_topicTotopic")
  unit_unit_topicTotopic unit[] @relation("unit_topicTotopic")
}

model unit {
  id                                   Int            @id(map: "PK__unit__3213E83F95AF58EB")
  code                                 String         @unique(map: "UQ__unit__357D4CF90F552E7A") @db.VarChar(50)
  name                                 String?        @db.VarChar(500)
  status                               String         @db.Char(1)
  type                                 String         @db.Char(1)
  topic                                Int?
  list_price_HUF                       Int?
  list_price_EUR                       Float?
  length                               Float?
  topic_unit_topicTotopic              topic?         @relation("unit_topicTotopic", fields: [topic], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_unit_topic")
  unit_version_unit_version_unitTounit unit_version[] @relation("unit_version_unitTounit")

  @@index([type], map: "unit_type_index")
}

model unit_version {
  id                           Int         @id(map: "PK__unit_ver__3213E83F5981DD6A")
  unit                         Int
  version                      String      @default("", map: "DF__unit_vers__versi__22FF2F51") @db.VarChar(10)
  is_default                   String      @default("N", map: "DF__unit_vers__is_de__23F3538A") @db.Char(1)
  published                    String      @default("Y", map: "DF__unit_vers__publi__24E777C3") @db.Char(1)
  pack_unit                    pack_unit[]
  unit_unit_version_unitTounit unit        @relation("unit_version_unitTounit", fields: [unit], references: [id], onUpdate: NoAction, map: "fk_unit_version_unit")

  @@unique([unit, version], map: "uq_unit_version")
}
